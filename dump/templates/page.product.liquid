{% comment %} Header Include (adjust if your theme uses a different include) {% endcomment %}
<header class="main-header">
  <nav class="navbar">
    <div class="navbar-left">
      <a href="#" class="logo">GLADE</a>
    </div>
    <div class="navbar-center">
      <span id="promo-text">FREE RETURNS WITHIN 30 DAYS</span>
    </div>
    <div class="navbar-right">
      <ul class="nav-menu">
        <li>
          <a href="/pages/shop-all">SHOP</a>
        </li>
        <li><a href="#">ABOUT</a></li>
        <li><a href="#">JOURNAL</a></li>
      </ul>
      <div class="nav-icons">
        <a href="#" class="icon-link"><i class="fas fa-search"></i></a>
        <a href="#" class="icon-link"><i class="fas fa-user"></i></a>
        <a href="#" class="icon-link cart" id="cart-toggle">
          <i class="fas fa-shopping-bag"></i>
          <span class="cart-count">0</span>
        </a>
      </div>
    </div>
  </nav>
</header>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Add cart-count badge if not present
    var cartIcon = document.querySelector('.icon-link.cart');
    if (cartIcon && !cartIcon.querySelector('.cart-count')) {
      var badge = document.createElement('span');
      badge.className = 'cart-count';
      badge.textContent = '0';
      cartIcon.appendChild(badge);
    }
    // Fetch cart count on load
    fetch('/cart.js')
      .then((res) => res.json())
      .then((cart) => {
        var badge = document.querySelector('.cart-count');
        if (badge) badge.textContent = cart.item_count;
      });
  });
</script>

<style>
  body,
  .all-products-grid {
    background: #000 !important;
  }
  .all-products-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 32px;
    margin: 40px 0;
    background: #000;
  }
  .product-card {
    background: #000;
    border: 1px solid #fff;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 24px rgba(255, 255, 255, 0.04);
    display: flex;
    flex-direction: column;
    font-family: 'Oswald', Arial, sans-serif;
    transition: box-shadow 0.2s, border-color 0.2s, transform 0.2s;
  }
  .product-card a,
  .product-title,
  .product-title-row {
    text-decoration: none !important;
  }
  .product-card a:hover,
  .product-card a:focus {
    text-decoration: none !important;
  }
  .product-card:hover {
    box-shadow: 0 8px 32px rgba(255, 255, 255, 0.1);
    border-color: #fff;
    transform: translateY(-4px) scale(1.01);
  }
  .product-image {
    width: 100%;
    aspect-ratio: 1/1.1;
    background-size: cover;
    background-position: center;
    min-height: 320px;
    border-bottom: 1px solid #222;
  }
  .product-info {
    padding: 24px 20px 16px 20px;
    color: #fff;
    display: flex;
    flex-direction: column;
    gap: 8px;
  }
  .product-title-row {
    display: flex;
    align-items: center;
    gap: 8px;
  }
  .product-title {
    font-size: 1.3rem;
    font-weight: 900;
    text-transform: uppercase;
    letter-spacing: 1px;
    color: #fff;
    margin-bottom: 0;
    font-family: 'Oswald', Arial, sans-serif;
  }
  .product-arrow {
    width: 22px;
    height: 22px;
    display: inline-block;
    vertical-align: middle;
    stroke: #fff;
  }
  .product-price {
    font-size: 1.1rem;
    font-weight: 700;
    color: #fff;
  }
  .product-price .old-price {
    color: #888;
    text-decoration: line-through;
    margin-left: 8px;
    font-weight: 400;
  }
  .add-to-cart-btn {
    margin-top: 18px;
    padding: 12px 0;
    width: 100%;
    background: #fff;
    color: #000;
    border: 1px solid #fff;
    border-radius: 4px;
    font-family: 'Oswald', Arial, sans-serif;
    font-size: 1rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 1px;
    cursor: pointer;
    transition: background 0.2s, color 0.2s;
  }
  .add-to-cart-btn:hover {
    background: #000;
    color: #fff;
    border: 1px solid #fff;
  }
  .cart-drawer-overlay {
    position: fixed;
    top: 0;
    right: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.7);
    z-index: 9999;
    display: flex;
    justify-content: flex-end;
  }
  .cart-drawer {
    background: #000;
    color: #fff;
    width: 420px;
    max-width: 100vw;
    height: 100vh;
    display: flex;
    flex-direction: column;
    box-shadow: -2px 0 24px rgba(0, 0, 0, 0.5);
  }
  .cart-drawer-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 24px 24px 12px 24px;
    border-bottom: 1px solid #222;
  }
  .cart-drawer-title {
    font-size: 1.3rem;
    font-family: 'Oswald', Arial, sans-serif;
  }
  .cart-drawer-close {
    background: none;
    border: none;
    color: #fff;
    font-size: 2.2rem;
    cursor: pointer;
  }
  .cart-drawer-footer {
    margin-top: auto;
    padding: 24px;
    border-top: 1px solid #222;
    background: #000;
  }
  .cart-drawer-subtotal-row {
    display: flex;
    justify-content: space-between;
    align-items: flex-end;
    margin-bottom: 18px;
  }
  .cart-drawer-subtitle {
    color: #888;
    font-size: 0.95rem;
    text-transform: uppercase;
  }
  .cart-drawer-subtotal-label {
    font-size: 1.2rem;
    font-weight: 900;
    font-family: 'Oswald', Arial, sans-serif;
  }
  .cart-drawer-subtotal-amount {
    font-size: 2rem;
    font-weight: 900;
    font-family: 'Oswald', Arial, sans-serif;
  }
  .cart-drawer-checkout {
    width: 100%;
    padding: 18px 0;
    background: #fff;
    color: #000;
    border: none;
    font-size: 1.1rem;
    font-weight: 900;
    text-transform: uppercase;
    font-family: 'Oswald', Arial, sans-serif;
    cursor: pointer;
    transition: background 0.2s, color 0.2s;
  }
  .cart-drawer-checkout:hover {
    background: #000;
    color: #fff;
    border: 1.5px solid #fff;
  }
  .cart-drawer-item {
    display: flex;
    align-items: center;
    border-bottom: 1px solid #222;
    padding: 18px 24px;
  }
  .cart-drawer-item-img {
    width: 80px;
    height: 100px;
    object-fit: cover;
    margin-right: 18px;
  }
  .cart-drawer-item-info {
    flex: 1;
  }
  .cart-drawer-item-title {
    font-size: 1.1rem;
    font-weight: 900;
    font-family: 'Oswald', Arial, sans-serif;
  }
  .cart-drawer-item-variant {
    color: #aaa;
    font-size: 0.95rem;
    margin-bottom: 8px;
  }
  .cart-drawer-item-price {
    font-size: 1.1rem;
    font-weight: 700;
  }
  .cart-drawer-qty-row {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-top: 8px;
  }
  .cart-drawer-qty-btn {
    background: #000;
    color: #fff;
    border: 1px solid #fff;
    width: 32px;
    height: 32px;
    font-size: 1.2rem;
    font-family: 'Oswald', Arial, sans-serif;
    cursor: pointer;
    transition: background 0.2s, color 0.2s;
  }
  .cart-drawer-qty-btn:hover {
    background: #fff;
    color: #000;
  }
  .cart-drawer-remove {
    background: none;
    border: none;
    color: #fff;
    font-size: 1.5rem;
    cursor: pointer;
    margin-left: 12px;
  }
</style>

<div class="all-products-grid">
  {% for product in collections.all.products %}
    <div class="product-card">
      <a href="{{ product.url }}">
        <div
          class="product-image"
          style="background-image: url('{{ product.featured_image | img_url: 'large' }}');"
        ></div>
        <div class="product-info">
          <div class="product-title-row">
            <h3 class="product-title">{{ product.title }}</h3>
            <span class="product-arrow">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke-width="1.5"
                stroke="currentColor"
              >
                <path stroke-linecap="round" stroke-linejoin="round" d="m4.5 19.5 15-15m0 0H8.25m11.25 0v11.25" />
              </svg>
            </span>
          </div>
          <p class="product-price">
            {{ product.price | money }}
            {% if product.compare_at_price > product.price %}
              <span class="old-price">{{ product.compare_at_price | money }}</span>
            {% endif %}
          </p>
        </div>
      </a>
      <form method="post" action="/cart/add">
        <input type="hidden" name="id" value="{{ product.variants.first.id }}">
        <button type="submit" class="add-to-cart-btn">Add to Cart</button>
      </form>
      <script>
        document.querySelectorAll('.add-to-cart-btn').forEach((btn) => {
          btn.addEventListener('click', function (e) {
            e.preventDefault();
            const form = btn.closest('form');
            const formData = new FormData(form);
            fetch('/cart/add.js', {
              method: 'POST',
              body: formData,
            }).then(() => {
              fetch('/cart.js')
                .then((res) => res.json())
                .then((cart) => {
                  var badge = document.querySelector('.cart-count');
                  if (badge) badge.textContent = cart.item_count;
                });
            });
          });
        });
      </script>
    </div>
  {% endfor %}
</div>

<div id="cart-drawer-overlay" class="cart-drawer-overlay" style="display:none;">
  <div class="cart-drawer">
    <div class="cart-drawer-header">
      <span class="cart-drawer-title"><b id="cart-drawer-count">0</b> ITEMS IN YOUR BAG.</span>
      <button class="cart-drawer-close" onclick="closeCartDrawer()">&times;</button>
    </div>
    <div id="cart-drawer-items"></div>
    <div class="cart-drawer-footer">
      <div class="cart-drawer-subtotal-row">
        <div>
          <div class="cart-drawer-subtitle">SHIPPING & TAXES</div>
          <div class="cart-drawer-subtotal-label">SUBTOTAL</div>
        </div>
        <div>
          <div class="cart-drawer-subtitle">CALCULATED AT CHECKOUT</div>
          <div class="cart-drawer-subtotal-amount" id="cart-drawer-subtotal">â‚¹0.00</div>
        </div>
      </div>
      <button class="cart-drawer-checkout" onclick="window.location='/checkout'">PROCEED TO CHECKOUT</button>
    </div>
  </div>
</div>

{% comment %} Footer Include (adjust if your theme uses a different include) {% endcomment %}
{% section 'footer' %}

<script>
  if (typeof Shopify === 'undefined') Shopify = {};
  Shopify.formatMoney =
    Shopify.formatMoney ||
    function (cents, format) {
      if (typeof cents === 'string') {
        cents = cents.replace('.', '');
      }
      var value = (cents / 100).toFixed(2);
      var formattedValue = 'â‚¹' + value;

      // If a format string is provided, use it
      if (typeof format !== 'undefined') {
        return format.replace('{{amount}}', value).replace('{{amount_with_comma_separator}}', value.replace('.', ','));
      }

      return formattedValue;
    };

  function openCartDrawer() {
    document.getElementById('cart-drawer-overlay').style.display = 'flex';
    fetchCartDrawer();
  }
  function closeCartDrawer() {
    document.getElementById('cart-drawer-overlay').style.display = 'none';
  }
  function fetchCartDrawer() {
    fetch('/cart.js')
      .then((res) => res.json())
      .then((cart) => {
        document.getElementById('cart-drawer-count').textContent = cart.item_count;
        var badge = document.querySelector('.cart-count');
        if (badge) badge.textContent = cart.item_count;
        document.getElementById('cart-drawer-subtotal').textContent = Shopify.formatMoney(cart.total_price);

        let html = '';
        if (cart.items.length === 0) {
          html = '<div style="padding:32px;color:#888;">Your bag is empty.</div>';
        } else {
          cart.items.forEach((item) => {
            // Fix for image URL
            var img = item.image ? (item.image.startsWith('http') ? item.image : 'https:' + item.image) : '';
            html += `
            <div class="cart-drawer-item">
              <img src="${img}" class="cart-drawer-item-img" alt="${item.title}">
              <div class="cart-drawer-item-info">
                <div class="cart-drawer-item-title">${item.product_title}</div>
                <div class="cart-drawer-item-variant">${item.variant_title ? item.variant_title : ''}</div>
                <div class="cart-drawer-item-price">${Shopify.formatMoney(item.final_line_price)}</div>
                <div class="cart-drawer-qty-row">
                  <button class="cart-drawer-qty-btn" onclick="updateCartQty(${item.id}, ${
              item.quantity - 1
            })">-</button>
                  <span>${item.quantity}</span>
                  <button class="cart-drawer-qty-btn" onclick="updateCartQty(${item.id}, ${
              item.quantity + 1
            })">+</button>
                  <button class="cart-drawer-remove" onclick="updateCartQty(${item.id}, 0)">&times;</button>
                </div>
              </div>
            </div>
          `;
          });
        }
        document.getElementById('cart-drawer-items').innerHTML = html;
      })
      .catch((error) => {
        console.error('Error fetching cart data:', error);
        // Optionally show error message to user
        document.getElementById('cart-drawer-items').innerHTML =
          '<div style="padding:32px;color:#888;">Error loading cart items.</div>';
      });
  }
  function updateCartQty(id, qty) {
    fetch('/cart/change.js', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ id, quantity: qty }),
    })
      .then(() => fetchCartDrawer())
      .catch((error) => {
        console.error('Error updating cart quantity:', error);
        // Optionally show error message to user
      });
  }
  // Make cart icon open the drawer
  var cartIcon = document.querySelector('.icon-link.cart');
  if (cartIcon) cartIcon.setAttribute('onclick', 'openCartDrawer()');
  document.querySelectorAll('.add-to-cart-btn').forEach((btn) => {
    btn.addEventListener('click', function (e) {
      e.preventDefault();
      const form = btn.closest('form');
      const formData = new FormData(form);
      fetch('/cart/add.js', {
        method: 'POST',
        body: formData,
      })
        .then(() => {
          openCartDrawer();
          fetch('/cart.js')
            .then((res) => res.json())
            .then((cart) => {
              var badge = document.querySelector('.cart-count');
              if (badge) badge.textContent = cart.item_count;
            })
            .catch((error) => {
              console.error('Error fetching cart data:', error);
            });
        })
        .catch((error) => {
          console.error('Error adding item to cart:', error);
          // Optionally show error message to user
        });
    });
  });
</script>
